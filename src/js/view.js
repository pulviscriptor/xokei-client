/* The view for the game -- handles displaying the game and listening to events
 * generated by the user manipulating the display of the game */
"use strict";

/// requires
var Display = require("./display"),
	events = require("./events"),
	Player = require("./players"),
	utils = require("./utils"),
	settings = require("./settings");
	
/// object
function View(board) {
	/// public variables
	this.$message = $(".message");
	this.$messageContainer = $(".message-container");
	
	this.$playerOneName = $(".player-1-name-text");
	this.$playerOneScore = $(".player-1-score");
	
	this.$playerTwoName = $(".player-2-name-text");
	this.$playerTwoScore = $(".player-2-score");
	
	this.board = board;
	this.controller = null;
	this.display = new Display(board);
	this.events = events;

	this.init();
}

/// public functions
// display a closable message over the board to the player
View.prototype = {
	//todo move this to utils
	escapeHtml: function (string) {
		return utils.escapeHtml(string);
	},

	init: function () {
		this.initMessages();
		this.initSettings();
		this.initTooltips();
	},

	initTooltips: function () {
		// we need jquery's tooltip, but its in conflict with bootstrap
		$.fn.tooltip.noConflict();


		$(window).tooltip({
			items: '.tlp',
			content: function () {
				return $(this).data('tooltip');
			},
			/*classes: {
			 'ui-tooltip': 'score-tooltip-content'
			 },*/
			tooltipClass: 'tooltip-content'
			//extraClass: 'score-tooltip-content'
		});
	},

	initSettings: function () {
		$('.name-input').attr('maxlength', settings.game.playerNameMaxLength);
	},

	closeMessage: function () {
		if (this.hideMessageTimer) {
			clearTimeout(this.hideMessageTimer);
			this.hideMessageTimer = null;
		}
		
		this.$messageContainer.fadeOut(400);
		this.controller.emit("close message");
	},
	
	initMessages: function () {
		this.$messageContainer.hide();
		this.$message.html("");
		$(".close-message").click(this.closeMessage.bind(this));
	},
	
	message: function (message, life) {
		var boardWidth = this.display.$board.width(),
			func,
			self = this;
		
		this.$message.html(message.message || message);
		this.$messageContainer
			.css("left", (boardWidth - this.$messageContainer.width()) / 2)
			.fadeIn(400);
		
		if (typeof life === "number" || typeof message.life === "number") {
			this.hideMessageTimer = setTimeout(function () {
				self.$messageContainer.fadeOut(400);
			}, life || message.life);
		} else if (typeof life === "string" || 
			typeof message.life === "string") {
			// we assume we have an event listener here
			func = this.controller
				.addListener(life || message.life, function () {
					self.closeMessage();
					self.controller.removeListener(life || message.life, func);
				});
		}
	},
	
	// if the window size is changed, the message needs to be replaced at the
	// center of the board
	resizeMessage: function () {
		this.$messageContainer.css("left", (this.display.$board.width() - 
			this.$messageContainer.width()) / 2);
	},
	
	reshowGame: function () {
		this.display.createActors();
		
		if (this.board.puck) {
			this.display.createPuck();
		}
	},

	// cause the game board to be displayed
	showGame: function () {
		this.display.createActors();
		
		if (this.board.puck) {
			this.display.createPuck();
		}
		
		this.events.listen(this.controller, this.display);
	},
	
	// display who's turn it is
	showTurnState: function (player) {
		$(".player-name-text").removeClass("turn-owner");
		$(".actor-player").stop(true).fadeTo(200, "1");

		if (player === Player.One) {
			this.$playerOneName.addClass("turn-owner");
			$(".actor-player2").stop(true).fadeTo(200, settings.game.inactivePlayerOpacity);
		} else {
			this.$playerTwoName.addClass("turn-owner");
			$(".actor-player1").stop(true).fadeTo(200, settings.game.inactivePlayerOpacity);
		}

		this.updatePlayerNamesTooltips();
	},
	
	// update the scores of the players on the screen
	updateScore: function (score) {
		this.$playerOneScore.html(score[Player.One]);
		this.$playerTwoScore.html(score[Player.Two]);

		$('.score-point-player1').each(function () {
			var $el = $(this);
			var dataScore = parseInt($el.data('score'));
			if(dataScore > score[Player.One] && !$el.hasClass('hidden')) {
				$el.addClass('hidden');
			}else if(dataScore <= score[Player.One] && $el.hasClass('hidden')) {
				$el.removeClass('hidden');
			}
		}).data('tooltip', 'You scored <b>' + score[Player.One] + '</b> goal' + (score[Player.One]>1?'s':'') +
			'<br>Your opponent scored <b>' + score[Player.Two] + '</b>' +
			'<br>Game ends at <b>' + settings.game.scoreToWin + '</b> goals');


		$('.score-point-player2').each(function () {
			var $el = $(this);
			var dataScore = parseInt($el.data('score'));
			if(dataScore > score[Player.Two] && !$el.hasClass('hidden')) {
				$el.addClass('hidden');
			}else if(dataScore <= score[Player.Two] && $el.hasClass('hidden')) {
				$el.removeClass('hidden');
			}
		}).data('tooltip', 'You scored <b>' + score[Player.Two] + '</b>' + ' goal' + (score[Player.Two]>1?'s':'') +
			'<br>Your opponent scored <b>' + score[Player.One] + '</b>' +
			'<br>Game ends at <b>' + settings.game.scoreToWin + '</b> goals');
	},

	updatePlayerNamesTooltips: function () {
		var score = {};
		if(!this.controller.turns.length) {
			score[Player.One] = 0;
			score[Player.Two] = 0;
		}else{
			score = this.controller.turns.slice(-1)[0].score();
		}

		var scoreIs = 'The score is ' + score[Player.One] + '-' + score[Player.Two] + '.<br>';
		var tooltipP1 = scoreIs;
		var tooltipP2 = scoreIs;
		var lastGame = this.board.gamesHistory[this.board.settings.gameID-1];

		if(lastGame) {
			tooltipP1 += this.escapeHtml(Player.name[Player.One]) + ' ' + (lastGame.winner == Player.One ? 'won' : 'lost') + ' Game ' + (this.board.settings.gameID-1) + '.<br>';
			tooltipP2 += this.escapeHtml(Player.name[Player.Two]) + ' ' + (lastGame.winner == Player.Two ? 'won' : 'lost') + ' Game ' + (this.board.settings.gameID-1) + '.<br>';
		}

		if(score[Player.One] > score[Player.Two]) {
			tooltipP1 += this.escapeHtml(Player.name[Player.One]) + ' is currently winning.<br>';
			tooltipP2 += this.escapeHtml(Player.name[Player.Two]) + ' is currently losing.<br>';
		}else if(score[Player.One] < score[Player.Two]) {
			tooltipP1 += this.escapeHtml(Player.name[Player.One]) + ' is currently losing.<br>';
			tooltipP2 += this.escapeHtml(Player.name[Player.Two]) + ' is currently winning.<br>';
		}else{
			tooltipP1 += this.escapeHtml(Player.name[Player.One]) + ' is neither winning nor losing.<br>';
			tooltipP2 += this.escapeHtml(Player.name[Player.Two]) + ' is neither winning nor losing.<br>';
		}
		tooltipP1 += 'It is the turn of ' + this.escapeHtml(Player.name[this.board.settings.owner]) + '.';
		tooltipP2 += 'It is the turn of ' + this.escapeHtml(Player.name[this.board.settings.owner]) + '.';

		$('.player-1-name-text,.player-1-score').data('tooltip', tooltipP1);
		$('.player-2-name-text,.player-2-score').data('tooltip', tooltipP2);
	},

	// initialize our dialog windows
	initDialogsWindows: function () {
		$('#game-won-window').draggable({ containment: "window" });
		$('#names-2p-window').draggable({ containment: "window" });
		$('#game-select-window').draggable({ containment: "window" }).removeClass('hidden');
		$('#settings-window').draggable({ containment: "window" });
		this.resizeDialogsWindows();
	},

	// resize our dialog windows
	resizeDialogsWindows: function () {
		var $board = $('#board');
		var $wonDialog = $('#game-won-window');
		if(!$wonDialog.hasClass('hidden')) {
			$wonDialog.position({
				of: $board
			});
		}

		var $gameSelectDialog = $('#game-select-window');
		if(!$gameSelectDialog.hasClass('hidden')) {
			$gameSelectDialog.position({
				of: $board
			});
		}

		var $names2pDialog = $('#names-2p-window');
		if(!$names2pDialog.hasClass('hidden')) {
			$names2pDialog.position({
				of: $board
			});
		}

		var $settingsDialog = $('#settings-window');
		if(!$settingsDialog.hasClass('hidden')) {
			$settingsDialog.position({
				of: $board
			});
		}

		// TODO move this code into some onResize function
		var width = ($board.width() / 2.6) + "px";
		$('.score-container .player-name').css('width', width);

		setTimeout(function () {
			$('.score-container').removeClass('hidden')
			.position({
				my: "center bottom",
				at: "top-10px",
				of: $board,
				collision: "none"
			});
		}, 1);

		this.reCalculatePlayerNamesFontSize();
	},

	// fit player names on top of board if they are too big
	// https://stackoverflow.com/questions/1582534/calculating-text-width
	reCalculatePlayerNamesFontSize: function () {
		var getTextSize = function (text, fontSize) {
			var $el = $('<span style="font-family:\'Helvetica Neue\', Helvetica, Arial, sans-serif;font-size: ' + (fontSize || '1.3') + 'em;font-weight:bold"></span>').text(text).hide().appendTo('body');
			var ret = $el.width();
			$el.remove();
			return ret;
		};
		var calculateAllowedSize = function ($el, nickname) {
			var allowedMaxSize = $el.width();
			for(var candidate = 1.3; candidate >= 0.5; candidate = parseFloat((candidate-0.01).toFixed(2))) {
				var candidateSize = getTextSize(nickname, candidate);
				if(candidateSize < allowedMaxSize) return candidate;
			}
			return 0.5;
		};

		var $p1name = $('.score-container .player-1-name');
		var $p2name = $('.score-container .player-2-name');
		var p1size = calculateAllowedSize($p1name, $p1name.text());
		var p2size = calculateAllowedSize($p2name, $p2name.text());
		Player.basicFontSize[Player.One] = p1size;
		Player.basicFontSize[Player.Two] = p2size;
		$p1name.css('font-size', p1size + 'em');
		$p2name.css('font-size', p2size + 'em');
	},

	// display window with won message and button to start new game
	gameWon: function (scores) {
		if(scores.player1 > scores.player2) {
			$('#game-won-winner-name').text(Player.name[Player.One]).css('font-size', Player.basicFontSize[Player.One] + 'em');
			$('#game-won-winner-score').text(scores.player1);
			$('#game-won-looser-score').text(scores.player2);
		}else{
			$('#game-won-winner-name').text(Player.name[Player.Two]).css('font-size', Player.basicFontSize[Player.Two] + 'em');
			$('#game-won-winner-score').text(scores.player2);
			$('#game-won-looser-score').text(scores.player1);
		}
		$('#game-won-window').removeClass('hidden').position({
			of: $('#board')
		});
	},

	// button "New Game" clicked in "won message" dialog
	newGameClicked: function () {
		$('#game-won-window').addClass('hidden');
		this.showWelcomeWindow();
	},

	showWelcomeWindow: function () {
		$('#game-select-window').removeClass('hidden').position({
			of: $('#board')
		});
	},

	hideWelcomeWindow: function () {
		$('#game-select-window').addClass('hidden');
	},

	showNames2pWindow: function () {
		$('#names-2p-window').removeClass('hidden').position({
			of: $('#board')
		});
	},

	hideNames2pWindow: function () {
		$('#names-2p-window').addClass('hidden');
	},

	// add turn to notation box
	notate: function (type, id, str) {
		var notation = {id: id, str: str};
		this.board.gamesHistory[this.board.settings.gameID]['notation_' + type].push(notation);

		if($('.notation-' + type + '-table' + this.board.settings.gameID).hasClass('notation-collapsed')) {
			$('.notation-area-' + type + '-' + this.board.settings.gameID).html(utils.notation['collapsedHTML' + type](this.board.gamesHistory[this.board.settings.gameID]['notation_' + type]));
		}else{
			$('.notation-area-' + type + '-' + this.board.settings.gameID).html(utils.notation['expandedHTML' + type](this.board.gamesHistory[this.board.settings.gameID]['notation_' + type]));
		}

		if(type == 'move' && id == 1) {
			var $table = $('.notation-move-table' + this.board.settings.gameID);
			$table.removeClass('hidden');
			if($('.move-expand-all').data('state') == '3') {
				$table.find('.notation-expand-collapse-icon').click();
			}
		}
	},

	// remove all text from moves box
	clearNotations: function () {
		$('#moves').html('');
	},

	showErrorNames2P: function (player, msg) {
		var $el = $(player == Player.One ? '#names-2p-error-p1' : '#names-2p-error-p2');
		if($el.text().trim()) return;
		$el.text(msg);
		setTimeout(function () {
			$el.html('&nbsp;');
		}, 2000);
	},

	updateNames: function(p1name, p2name) {
		$('.player-1-name-text').text(p1name);
		$('.player-2-name-text').text(p2name);

		this.reCalculatePlayerNamesFontSize();
	},

	// when we start new/another game we call this
	notateMeta: function (/*anotherGame*/) {
		var ISO8601Date = utils.notation.ISO8601Date();

		// setup areas for notations
		var $moves = $('#moves');
		/*if(anotherGame) {
			$moves.append('<br>');
		}*/
		$moves.append('<table class="notation-table notation-meta-table notation-meta-table' + this.board.settings.gameID + ' notation-expanded" data-type="meta">' +
			'<tr>' +
				'<td class="notation-expand-collapse-td">' +
					'<i class="fa fa-chevron-down notation-expand-collapse-icon" aria-hidden="true" data-gameid="' + this.board.settings.gameID + '" data-type="meta"></i>' +
				'</td>' +
				'<td>' +
					'<span class="notation-area-meta notation-area-meta-' + this.board.settings.gameID + '"></span>' +
				'</td>' +
			'</tr>' +
			'</table>');
		$moves.append('<br>');
		if($('.move-expand-all').data('state') == '3') {
			$('.notation-meta-table' + this.board.settings.gameID).find('.notation-expand-collapse-icon').click();
		}
		//$moves.append('<p class="notation-spacer"></p>');

		$moves.append('<table class="hidden notation-table notation-move-table notation-move-table' + this.board.settings.gameID + ' notation-expanded" data-type="move">' +
			'<tr>' +
				'<td class="notation-expand-collapse-td">' +
				'	<i class="fa fa-chevron-down notation-expand-collapse-icon" aria-hidden="true" data-gameid="' + this.board.settings.gameID + '" data-type="move"></i>' +
				'</td>' +
				'<td>' +
					'<span class="notation-area-move notation-area-move-' + this.board.settings.gameID + '"></span>' +
				'</td>' +
			'</tr>' +
			'</table>');
		$moves.append('<br>');
		//$moves.append('<p class="notation-spacer"></p>');

		// notate
		/*if(anotherGame) {
			this.notate( 'meta', 'anothergame', '');
		}*/
		this.notate( 'meta', 'gamenumber', '[Game "' + this.board.settings.gameID + '"]');
		this.notate( 'meta', 'date', '[Date "' + ISO8601Date + '"]');
		this.notate( 'meta', 'p1name', '[White "' + Player.name[Player.One] + '"]');
		this.notate( 'meta', 'p2name', '[Black "' + Player.name[Player.Two] + '"]');
	}
};

/// exports
module.exports = View;
