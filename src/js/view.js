/* The view for the game -- handles displaying the game and listening to events
 * generated by the user manipulating the display of the game */
"use strict";

/// requires
var Display = require("./display"),
	events = require("./events"),
	Player = require("./players");
	
/// object
function View(board) {
	/// public variables
	this.$message = $(".message");
	this.$messageContainer = $(".message-container");
	
	this.$playerOneName = $(".player-1-name");
	this.$playerOneScore = $(".player-1-score");
	
	this.$playerTwoName = $(".player-2-name");
	this.$playerTwoScore = $(".player-2-score");
	
	this.board = board;
	this.controller = null;
	this.display = new Display(board);
	this.events = events;
	
	this.initMessages();
}

/// public functions
// display a closable message over the board to the player
View.prototype = {
	closeMessage: function () {
		if (this.hideMessageTimer) {
			clearTimeout(this.hideMessageTimer);
			this.hideMessageTimer = null;
		}
		
		this.$messageContainer.fadeOut(400);
		this.controller.emit("close message");
	},
	
	initMessages: function () {
		this.$messageContainer.hide();
		this.$message.html("");
		$(".close-message").click(this.closeMessage.bind(this));
	},
	
	message: function (message, life) {
		var boardWidth = this.display.$board.width(),
			func,
			self = this;
		
		this.$message.html(message.message || message);
		this.$messageContainer
			.css("left", (boardWidth - this.$messageContainer.width()) / 2)
			.fadeIn(400);
		
		if (typeof life === "number" || typeof message.life === "number") {
			this.hideMessageTimer = setTimeout(function () {
				self.$messageContainer.fadeOut(400);
			}, life || message.life);
		} else if (typeof life === "string" || 
			typeof message.life === "string") {
			// we assume we have an event listener here
			func = this.controller
				.addListener(life || message.life, function () {
					self.closeMessage();
					self.controller.removeListener(life || message.life, func);
				});
		}
	},
	
	// if the window size is changed, the message needs to be replaced at the
	// center of the board
	resizeMessage: function () {
		this.$messageContainer.css("left", (this.display.$board.width() - 
			this.$messageContainer.width()) / 2);
	},
	
	reshowGame: function () {
		this.display.createActors();
		
		if (this.board.puck) {
			this.display.createPuck();
		}
	},

	// cause the game board to be displayed
	showGame: function () {
		this.display.createActors();
		
		if (this.board.puck) {
			this.display.createPuck();
		}
		
		this.events.listen(this.controller, this.display);
	},
	
	// display who's turn it is
	showTurnState: function (player) {
		$(".player-name").css("text-decoration", "none");
		
		if (player === Player.One) {
			this.$playerOneName.css("text-decoration", "underline");
		} else {
			this.$playerTwoName.css("text-decoration", "underline");
		}
	},
	
	// update the scores of the players on the screen
	updateScore: function (score) {
		this.$playerOneScore.html(score[Player.One]);
		this.$playerTwoScore.html(score[Player.Two]);
	},

	// resize our dialog windows
	resizeDialogsWindows: function () {
		var $wonDialog = $('#game-won-window');
		if(!$wonDialog.hasClass('hidden')) {
			$wonDialog.position({
				of: $('#board')
			});
		}

		var $gameSelectDialog = $('#game-select-window');
		if(!$gameSelectDialog.hasClass('hidden')) {
			$gameSelectDialog.position({
				of: $('#board')
			});
		}
	},

	// display window with won message and button to start new game
	gameWon: function (scores) {
		if(scores.player1 > scores.player2) {
			$('#game-won-winner-name').text('Player1');
			$('#game-won-winner-score').text(scores.player1);
			$('#game-won-looser-score').text(scores.player2);
		}else{
			$('#game-won-winner-name').text('Player2');
			$('#game-won-winner-score').text(scores.player2);
			$('#game-won-looser-score').text(scores.player1);
		}
		$('#game-won-window').removeClass('hidden').position({
			of: $('#board')
		});
	},

	// button "New Game" clicked in "won message" dialog
	newGameClicked: function () {
		$('#game-won-window').addClass('hidden');
	},

	hideWelcomeWindow: function () {
		$('#game-select-window').addClass('hidden');
	}
};

/// exports
module.exports = View;